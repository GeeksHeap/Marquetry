# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Little Tabby
# This file is distributed under the same license as the Marquetry package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Marquetry v0.2.0-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-20 11:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../functions/activations/mish.rst:3
msgid "Mish"
msgstr ""

#: marquetry.functions.activations.mish.Mish:1
#: marquetry.functions.activations.mish.mish:1 of
msgid "Mish Function."
msgstr ""

#: marquetry.functions.activations.mish.mish:3 of
msgid ""
"This functioncd implements the Mish activation function. Mish is "
"anticipated as one of successors of the "
"ReLU(:class:`marquetry.functions.relu`). And it can take some negative "
"values unlike ReLU."
msgstr ""

#: marquetry.functions.activations.mish.mish:7 of
msgid "This function is obtained by:"
msgstr ""

#: marquetry.functions.activations.mish.mish:9 of
msgid ":math:`f(x) = x * Tanh(Softplus(x))`"
msgstr ""

#: marquetry.functions.activations.mish.Mish.backward
#: marquetry.functions.activations.mish.Mish.forward
#: marquetry.functions.activations.mish.mish of
msgid "Parameters"
msgstr ""

#: marquetry.functions.activations.mish.mish:11 of
msgid "Input container or ndarray that is float array."
msgstr ""

#: marquetry.functions.activations.mish.Mish.backward
#: marquetry.functions.activations.mish.Mish.forward
#: marquetry.functions.activations.mish.mish of
msgid "Returns"
msgstr ""

#: marquetry.functions.activations.mish.mish:14 of
msgid "Output container. A float array."
msgstr ""

#: marquetry.functions.activations.mish.Mish.backward
#: marquetry.functions.activations.mish.Mish.forward
#: marquetry.functions.activations.mish.mish of
msgid "Return type"
msgstr ""

#: marquetry.functions.activations.mish.mish:18 of
msgid "References"
msgstr ""

#: marquetry.functions.activations.mish.mish:19 of
msgid ""
"Mish: A Self Regularized Non-Monotonic Activation Function "
"(https://arxiv.org/abs/1908.08681)"
msgstr ""

#: marquetry.functions.activations.mish.mish:22 of
msgid "Examples"
msgstr ""

#: marquetry.functions.activations.mish.Mish:1 of
msgid "Bases: :py:class:`~marquetry.function.Function`"
msgstr ""

#: marquetry.functions.activations.mish.Mish:3 of
msgid ""
"This class implements the Mish activation function. Mish is anticipated "
"as one of successors of the ReLU(:class:`marquetry.functions.relu`). And "
"it can take some negative values unlike ReLU."
msgstr ""

#: marquetry.functions.activations.mish.Mish:9 of
msgid ""
"Generally, you don't need to execute ``forward`` and ``backward`` method "
"manually. You should use only ``__call__`` method."
msgstr ""

#: marquetry.functions.activations.mish.Mish.backward:1 of
msgid "Perform the backward computation of the function."
msgstr ""

#: marquetry.functions.activations.mish.Mish.backward:3 of
msgid "Gradient data arrays."
msgstr ""

#: marquetry.functions.activations.mish.Mish.backward:6 of
msgid "Gradient data arrays with respect to the input data arrays."
msgstr ""

#: marquetry.functions.activations.mish.Mish.backward:11 of
msgid ""
"Function backward should be called by only marquetry (user shouldn't call"
" this method). Generally, a user should call the backward method in "
":class:`marquetry.Container` of the model output."
msgstr ""

#: marquetry.functions.activations.mish.Mish.forward:1 of
msgid "Perform the forward computation of the function."
msgstr ""

#: marquetry.functions.activations.mish.Mish.forward:3 of
msgid "Input data arrays."
msgstr ""

#: marquetry.functions.activations.mish.Mish.forward:6 of
msgid "Output data arrays."
msgstr ""

#: marquetry.functions.activations.mish.Mish.forward:9 of
msgid ""
"Generally, this class shouldn't be called by manually because `forward` "
"is called via `__call__`."
msgstr ""

