# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Little Tabby
# This file is distributed under the same license as the Marquetry package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Marquetry v0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-07 21:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../index.rst:52
msgid "Contents:"
msgstr "コンテンツ:"

#: ../../index.rst:7
msgid "Welcome to Marquetry |version|!"
msgstr "ようこそ、Marquetry |version| へ！"

#: ../../index.rst:10
msgid "Marquetry"
msgstr ""

#: ../../index.rst:11
msgid ""
"Marquetry is developed by only Python! If you want to see the source "
"code, let's see `GitHub <https://github.com/little-tabby/Marquetry>`_!"
msgstr ""
"MarquetryはPythonのみで開発されたフレームワークです！"
"もし、ソースコードを見たいという場合は `GitHub <https://github.com/little-tabby/Marquetry>`_ をご覧ください！"

#: ../../index.rst:14
msgid "The source code can read easy if you are familiar with Python."
msgstr "ソースコードはPythonエンジニアであれば簡単に読み解くことができるでしょう。"

#: ../../index.rst:16
msgid ""
"Our purpose is create Deep Learning framework focus on the ``education`` "
"so complex implementation is minimized as much as possible."
msgstr ""
"このフレームワークは主に ``学習`` に焦点を当てています。"
"そのため、複雑な最適化などの実装をせずに可能な限りシンプルに実装されています。"

#: ../../index.rst:19
msgid ""
"After learning the basic, anyone can learn the mechanism of framework "
"from the source code."
msgstr ""
"ディープラーニングの基礎の学習を終えた後に、フレームワークの仕組みに興味があれば、是非ソースコードを読んでみてくださいな。"

#: ../../index.rst:21
msgid "For the simple implementation, there are some inefficient algorithms."
msgstr "シンプルであることを最優先にしているため、いくつかの計算式には非効率的なものが含まれています。"

#: ../../index.rst:23
msgid ""
"Therefore if you are a professional, sorry...this can't your needs..., "
"please consider to use other framework. (I suggest to use `PyTorch "
"<https://pytorch.org/>`_.)"
msgstr ""
"そのため、もしこれをご覧のあなたがこのフレームワークを業務で使用しようとしているのであれば、申し訳ありません..."
"このフレームワークはあなたのニーズを満たすことができないと思います..."
"その場合は、他のフレームワークを使用することを検討してみてください。"
"(個人的には `PyTorch <https://pytorch.org/>`_ がオススメです。)"

#: ../../index.rst:26
msgid ""
"If you are beginner of deep learning or deep learning learner, this "
"framework always besides of you!"
msgstr ""
"ですが、もしあなたがディープラーニングを学ぼうとしている初心者であればこのフレームワークはきっとあなたの助けになるでしょう！"

#: ../../index.rst:29
msgid "Logical construction"
msgstr "論理構造"

#: ../../index.rst:30
msgid "Marquetry core construction is the below."
msgstr "Marquetryのコア機能は以下のように実装されています。"

#: ../../index.rst:35
msgid "Marquetry's core components are :class:`Container` and :class:`Function`."
msgstr "このフレームワークのコア機能は :class:`Container` という独自のデータ保持機構と :class:`Function` という関数群で構成されます。"

#: ../../index.rst:37
msgid ""
"Container has ``data`` and ``gradient`` which is actual values. So "
"Container seems like a box of the values. Function applies the function "
"to the ``Container``, and returns the new ``Container`` which has "
"``data`` from the ``Function`` outputs."
msgstr "Containerは基本的には元となる ``データ`` と計算された ``勾配`` が格納されます。"
"つまり、Containerは文字通り、データを格納するコンテナとなります。"
"Functionはこの ``Container`` に対してその関数が持つ計算を実行します。そして、その結果を持つ ``Container`` を生成して返り値とします。"

#: ../../index.rst:41
msgid ""
"Please note, Marquetry is a dynamic computational graph framework so the "
"``Container`` records the passed functions in the forward process, and it"
" will gone back in the ``backward`` process. In the backward, the "
"backward function return the gradient, and it stored in the "
"``Container``'s gradient."
msgstr ""
"Marquetryは動的計算グラフの構造を持つフレームワークです。"
"つまり、この新たにFunctionによって生成された ``Container`` には生成したFunction自体も記録されて繋がりを保持します。"
"これによって、ユーザが管理することなく逆伝播のプロセスを簡単に実行することができるのです。"
"そして、その逆伝播のプロセスによって関数の勾配を計算し、その値を ``Container`` の ``gradient`` というプロパティに保持します。"

#: ../../index.rst:45
msgid ""
"In generally, the model parameters is stored :class:`Parameter` which "
"inherit the ``Container`` completely. (In short, ``Parameter`` has the "
"same methods as ``Container``.)"
msgstr ""
"通常、モデルのパラメータは :class:`Parameter` という ``Container`` を継承した構造の中に保持されています。"
"( ``継承`` とはこの文脈において、``Parameter`` は ``Container`` と同じ機能を持っていることを意味します。)"

#: ../../index.rst:50
msgid "More information"
msgstr "もっと詳しい情報をみたいですか？"

#: ../../index.rst:66
msgid "Get Started!"
msgstr "始めよう！"

#: ../../index.rst:70
msgid "Let's start your journey!"
msgstr "楽しい旅を始めましょう！"

#: ../../index.rst:72
msgid "Examples using Marquetry"
msgstr "Marquetryを使用する例題たち"

#: ../../index.rst:76
msgid "Let's see the example using Marquetry"
msgstr "Marquetryを使用した例をみてみましょう！"

#: ../../index.rst:80
msgid "API Reference"
msgstr "APIリファレンス"

#: ../../index.rst:84
msgid "All you needed is here!"
msgstr "Marquetryの機能は全てここに記載されています！"

