# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Little Tabby
# This file is distributed under the same license as the Marquetry package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Marquetry v0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-07 21:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../preprocesses/imputations/miss_imputation.rst:3
msgid "Miss Value Imputation"
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:1 of
msgid "Bases: :py:class:`~marquetry.preprocess.Preprocess`"
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:1 of
msgid "Missing Value Imputation for Categorical and Numeric Data."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:3 of
msgid ""
"MissImputation is a preprocessing step used to impute missing values in "
"both categorical and numeric columns of a Pandas DataFrame. It allows "
"users to specify different imputation methods for each type of column."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation
#: marquetry.preprocesses.imputation.miss_imputation.MissImputation.process of
msgid "Parameters"
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:7 of
msgid "A list of column names to be imputed with categorical values."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:9 of
msgid "A list of column names to be imputed with numeric values."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:11 of
msgid "The name of the MissImputation instance."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:13 of
msgid ""
"A boolean flag indicating whether this MissImputation instance is for "
"training or inference."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:16 of
msgid ""
"The imputation method to use for categorical columns. Supported methods "
"are \"mean\" or \"zero\". Defaults to \"mode\"."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:20 of
msgid ""
"The imputation method to use for numeric columns. Supported methods are "
"\"mean\", \"mode\", \"median\", and \"zero\". Defaults to \"mean\"."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:26 of
msgid "Examples"
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation:41 of
msgid ""
"MissImputation allows you to specify different imputation methods for "
"categorical and numeric columns. Supported imputation methods are "
"\"mean\", \"mode\", \"median\", and \"zero\". (\"mean\" and \"median\" "
"supports only numerical columns.) Imputed values are calculated based on "
"the specified method for each column. For categorical columns, \"mode\" "
"is used by default, and for numeric columns, \"mean\" is used by default."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation.process:1
#: of
msgid "Process the input DataFrame by imputing missing values."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation.process:3
#: of
msgid "The input DataFrame with missing values to be imputed."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation.process of
msgid "Returns"
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation.process:6
#: of
msgid "The DataFrame with missing values imputed based on the specified methods."
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation.process of
msgid "Return type"
msgstr ""

#: marquetry.preprocesses.imputation.miss_imputation.MissImputation.process:11
#: of
msgid ""
"Generally, process will be called by ``Marquetry`` core. Please call like"
" the ``EXAMPLES``."
msgstr ""

